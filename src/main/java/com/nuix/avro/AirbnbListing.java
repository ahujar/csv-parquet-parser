/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.nuix.avro;

import com.nuix.conversions.LocalDateConversion;
import com.univocity.parsers.annotations.Convert;
import com.univocity.parsers.annotations.Parsed;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class AirbnbListing extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -4929041148545065602L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AirbnbListing\",\"namespace\":\"com.nuix.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"host_id\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"host_name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"neighbourhood_group\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"neighbourhood\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"room_type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"price\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"minimum_nights\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"number_of_reviews\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"last_review\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}]},{\"name\":\"reviews_per_month\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"calculated_host_listings_count\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"availability_365\",\"type\":[\"null\",\"int\"],\"default\":null}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    }

    private static final BinaryMessageEncoder<AirbnbListing> ENCODER =
            new BinaryMessageEncoder<AirbnbListing>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<AirbnbListing> DECODER =
            new BinaryMessageDecoder<AirbnbListing>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<AirbnbListing> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<AirbnbListing> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<AirbnbListing> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<AirbnbListing>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this AirbnbListing to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a AirbnbListing from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a AirbnbListing instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static AirbnbListing fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    @Parsed
    private java.lang.Integer id;
    @Parsed
    private java.lang.CharSequence name;
    @Parsed
    private java.lang.Integer host_id;
    @Parsed
    private java.lang.CharSequence host_name;
    @Parsed
    private java.lang.CharSequence neighbourhood_group;
    @Parsed
    private java.lang.CharSequence neighbourhood;
    @Parsed
    private java.lang.Float latitude;
    @Parsed
    private java.lang.Float longitude;
    @Parsed
    private java.lang.CharSequence room_type;
    @Parsed
    private java.lang.Float price;
    @Parsed
    private java.lang.Integer minimum_nights;
    @Parsed
    private java.lang.Integer number_of_reviews;
    @Convert(conversionClass = LocalDateConversion.class, args = {"dd/MM/yyyy","d/MM/yyyy"})
    @Parsed
    private java.time.LocalDate last_review;
    @Parsed
    private java.lang.Float reviews_per_month;
    @Parsed
    private java.lang.Integer calculated_host_listings_count;
    @Parsed
    private java.lang.Integer availability_365;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public AirbnbListing() {
    }

    /**
     * All-args constructor.
     * @param id The new value for id
     * @param name The new value for name
     * @param host_id The new value for host_id
     * @param host_name The new value for host_name
     * @param neighbourhood_group The new value for neighbourhood_group
     * @param neighbourhood The new value for neighbourhood
     * @param latitude The new value for latitude
     * @param longitude The new value for longitude
     * @param room_type The new value for room_type
     * @param price The new value for price
     * @param minimum_nights The new value for minimum_nights
     * @param number_of_reviews The new value for number_of_reviews
     * @param last_review The new value for last_review
     * @param reviews_per_month The new value for reviews_per_month
     * @param calculated_host_listings_count The new value for calculated_host_listings_count
     * @param availability_365 The new value for availability_365
     */
    public AirbnbListing(java.lang.Integer id, java.lang.CharSequence name, java.lang.Integer host_id, java.lang.CharSequence host_name, java.lang.CharSequence neighbourhood_group, java.lang.CharSequence neighbourhood, java.lang.Float latitude, java.lang.Float longitude, java.lang.CharSequence room_type, java.lang.Float price, java.lang.Integer minimum_nights, java.lang.Integer number_of_reviews, java.time.LocalDate last_review, java.lang.Float reviews_per_month, java.lang.Integer calculated_host_listings_count, java.lang.Integer availability_365) {
        this.id = id;
        this.name = name;
        this.host_id = host_id;
        this.host_name = host_name;
        this.neighbourhood_group = neighbourhood_group;
        this.neighbourhood = neighbourhood;
        this.latitude = latitude;
        this.longitude = longitude;
        this.room_type = room_type;
        this.price = price;
        this.minimum_nights = minimum_nights;
        this.number_of_reviews = number_of_reviews;
        this.last_review = last_review;
        this.reviews_per_month = reviews_per_month;
        this.calculated_host_listings_count = calculated_host_listings_count;
        this.availability_365 = availability_365;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return name;
            case 2:
                return host_id;
            case 3:
                return host_name;
            case 4:
                return neighbourhood_group;
            case 5:
                return neighbourhood;
            case 6:
                return latitude;
            case 7:
                return longitude;
            case 8:
                return room_type;
            case 9:
                return price;
            case 10:
                return minimum_nights;
            case 11:
                return number_of_reviews;
            case 12:
                return last_review;
            case 13:
                return reviews_per_month;
            case 14:
                return calculated_host_listings_count;
            case 15:
                return availability_365;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                id = (java.lang.Integer) value$;
                break;
            case 1:
                name = (java.lang.CharSequence) value$;
                break;
            case 2:
                host_id = (java.lang.Integer) value$;
                break;
            case 3:
                host_name = (java.lang.CharSequence) value$;
                break;
            case 4:
                neighbourhood_group = (java.lang.CharSequence) value$;
                break;
            case 5:
                neighbourhood = (java.lang.CharSequence) value$;
                break;
            case 6:
                latitude = (java.lang.Float) value$;
                break;
            case 7:
                longitude = (java.lang.Float) value$;
                break;
            case 8:
                room_type = (java.lang.CharSequence) value$;
                break;
            case 9:
                price = (java.lang.Float) value$;
                break;
            case 10:
                minimum_nights = (java.lang.Integer) value$;
                break;
            case 11:
                number_of_reviews = (java.lang.Integer) value$;
                break;
            case 12:
                last_review = (java.time.LocalDate) value$;
                break;
            case 13:
                reviews_per_month = (java.lang.Float) value$;
                break;
            case 14:
                calculated_host_listings_count = (java.lang.Integer) value$;
                break;
            case 15:
                availability_365 = (java.lang.Integer) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public java.lang.Integer getId() {
        return id;
    }


    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(java.lang.Integer value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'name' field.
     * @return The value of the 'name' field.
     */
    public java.lang.CharSequence getName() {
        return name;
    }


    /**
     * Sets the value of the 'name' field.
     * @param value the value to set.
     */
    public void setName(java.lang.CharSequence value) {
        this.name = value;
    }

    /**
     * Gets the value of the 'host_id' field.
     * @return The value of the 'host_id' field.
     */
    public java.lang.Integer getHostId() {
        return host_id;
    }


    /**
     * Sets the value of the 'host_id' field.
     * @param value the value to set.
     */
    public void setHostId(java.lang.Integer value) {
        this.host_id = value;
    }

    /**
     * Gets the value of the 'host_name' field.
     * @return The value of the 'host_name' field.
     */
    public java.lang.CharSequence getHostName() {
        return host_name;
    }


    /**
     * Sets the value of the 'host_name' field.
     * @param value the value to set.
     */
    public void setHostName(java.lang.CharSequence value) {
        this.host_name = value;
    }

    /**
     * Gets the value of the 'neighbourhood_group' field.
     * @return The value of the 'neighbourhood_group' field.
     */
    public java.lang.CharSequence getNeighbourhoodGroup() {
        return neighbourhood_group;
    }


    /**
     * Sets the value of the 'neighbourhood_group' field.
     * @param value the value to set.
     */
    public void setNeighbourhoodGroup(java.lang.CharSequence value) {
        this.neighbourhood_group = value;
    }

    /**
     * Gets the value of the 'neighbourhood' field.
     * @return The value of the 'neighbourhood' field.
     */
    public java.lang.CharSequence getNeighbourhood() {
        return neighbourhood;
    }


    /**
     * Sets the value of the 'neighbourhood' field.
     * @param value the value to set.
     */
    public void setNeighbourhood(java.lang.CharSequence value) {
        this.neighbourhood = value;
    }

    /**
     * Gets the value of the 'latitude' field.
     * @return The value of the 'latitude' field.
     */
    public java.lang.Float getLatitude() {
        return latitude;
    }


    /**
     * Sets the value of the 'latitude' field.
     * @param value the value to set.
     */
    public void setLatitude(java.lang.Float value) {
        this.latitude = value;
    }

    /**
     * Gets the value of the 'longitude' field.
     * @return The value of the 'longitude' field.
     */
    public java.lang.Float getLongitude() {
        return longitude;
    }


    /**
     * Sets the value of the 'longitude' field.
     * @param value the value to set.
     */
    public void setLongitude(java.lang.Float value) {
        this.longitude = value;
    }

    /**
     * Gets the value of the 'room_type' field.
     * @return The value of the 'room_type' field.
     */
    public java.lang.CharSequence getRoomType() {
        return room_type;
    }


    /**
     * Sets the value of the 'room_type' field.
     * @param value the value to set.
     */
    public void setRoomType(java.lang.CharSequence value) {
        this.room_type = value;
    }

    /**
     * Gets the value of the 'price' field.
     * @return The value of the 'price' field.
     */
    public java.lang.Float getPrice() {
        return price;
    }


    /**
     * Sets the value of the 'price' field.
     * @param value the value to set.
     */
    public void setPrice(java.lang.Float value) {
        this.price = value;
    }

    /**
     * Gets the value of the 'minimum_nights' field.
     * @return The value of the 'minimum_nights' field.
     */
    public java.lang.Integer getMinimumNights() {
        return minimum_nights;
    }


    /**
     * Sets the value of the 'minimum_nights' field.
     * @param value the value to set.
     */
    public void setMinimumNights(java.lang.Integer value) {
        this.minimum_nights = value;
    }

    /**
     * Gets the value of the 'number_of_reviews' field.
     * @return The value of the 'number_of_reviews' field.
     */
    public java.lang.Integer getNumberOfReviews() {
        return number_of_reviews;
    }


    /**
     * Sets the value of the 'number_of_reviews' field.
     * @param value the value to set.
     */
    public void setNumberOfReviews(java.lang.Integer value) {
        this.number_of_reviews = value;
    }

    /**
     * Gets the value of the 'last_review' field.
     * @return The value of the 'last_review' field.
     */
    public java.time.LocalDate getLastReview() {
        return last_review;
    }


    /**
     * Sets the value of the 'last_review' field.
     * @param value the value to set.
     */
    public void setLastReview(java.time.LocalDate value) {
        this.last_review = value;
    }

    /**
     * Gets the value of the 'reviews_per_month' field.
     * @return The value of the 'reviews_per_month' field.
     */
    public java.lang.Float getReviewsPerMonth() {
        return reviews_per_month;
    }


    /**
     * Sets the value of the 'reviews_per_month' field.
     * @param value the value to set.
     */
    public void setReviewsPerMonth(java.lang.Float value) {
        this.reviews_per_month = value;
    }

    /**
     * Gets the value of the 'calculated_host_listings_count' field.
     * @return The value of the 'calculated_host_listings_count' field.
     */
    public java.lang.Integer getCalculatedHostListingsCount() {
        return calculated_host_listings_count;
    }


    /**
     * Sets the value of the 'calculated_host_listings_count' field.
     * @param value the value to set.
     */
    public void setCalculatedHostListingsCount(java.lang.Integer value) {
        this.calculated_host_listings_count = value;
    }

    /**
     * Gets the value of the 'availability_365' field.
     * @return The value of the 'availability_365' field.
     */
    public java.lang.Integer getAvailability365() {
        return availability_365;
    }


    /**
     * Sets the value of the 'availability_365' field.
     * @param value the value to set.
     */
    public void setAvailability365(java.lang.Integer value) {
        this.availability_365 = value;
    }

    /**
     * Creates a new AirbnbListing RecordBuilder.
     * @return A new AirbnbListing RecordBuilder
     */
    public static com.nuix.avro.AirbnbListing.Builder newBuilder() {
        return new com.nuix.avro.AirbnbListing.Builder();
    }

    /**
     * Creates a new AirbnbListing RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new AirbnbListing RecordBuilder
     */
    public static com.nuix.avro.AirbnbListing.Builder newBuilder(com.nuix.avro.AirbnbListing.Builder other) {
        if (other == null) {
            return new com.nuix.avro.AirbnbListing.Builder();
        } else {
            return new com.nuix.avro.AirbnbListing.Builder(other);
        }
    }

    /**
     * Creates a new AirbnbListing RecordBuilder by copying an existing AirbnbListing instance.
     * @param other The existing instance to copy.
     * @return A new AirbnbListing RecordBuilder
     */
    public static com.nuix.avro.AirbnbListing.Builder newBuilder(com.nuix.avro.AirbnbListing other) {
        if (other == null) {
            return new com.nuix.avro.AirbnbListing.Builder();
        } else {
            return new com.nuix.avro.AirbnbListing.Builder(other);
        }
    }

    /**
     * RecordBuilder for AirbnbListing instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AirbnbListing>
            implements org.apache.avro.data.RecordBuilder<AirbnbListing> {

        private java.lang.Integer id;
        private java.lang.CharSequence name;
        private java.lang.Integer host_id;
        private java.lang.CharSequence host_name;
        private java.lang.CharSequence neighbourhood_group;
        private java.lang.CharSequence neighbourhood;
        private java.lang.Float latitude;
        private java.lang.Float longitude;
        private java.lang.CharSequence room_type;
        private java.lang.Float price;
        private java.lang.Integer minimum_nights;
        private java.lang.Integer number_of_reviews;
        private java.time.LocalDate last_review;
        private java.lang.Float reviews_per_month;
        private java.lang.Integer calculated_host_listings_count;
        private java.lang.Integer availability_365;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.nuix.avro.AirbnbListing.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.name)) {
                this.name = data().deepCopy(fields()[1].schema(), other.name);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.host_id)) {
                this.host_id = data().deepCopy(fields()[2].schema(), other.host_id);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.host_name)) {
                this.host_name = data().deepCopy(fields()[3].schema(), other.host_name);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.neighbourhood_group)) {
                this.neighbourhood_group = data().deepCopy(fields()[4].schema(), other.neighbourhood_group);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.neighbourhood)) {
                this.neighbourhood = data().deepCopy(fields()[5].schema(), other.neighbourhood);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.latitude)) {
                this.latitude = data().deepCopy(fields()[6].schema(), other.latitude);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.longitude)) {
                this.longitude = data().deepCopy(fields()[7].schema(), other.longitude);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.room_type)) {
                this.room_type = data().deepCopy(fields()[8].schema(), other.room_type);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.price)) {
                this.price = data().deepCopy(fields()[9].schema(), other.price);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.minimum_nights)) {
                this.minimum_nights = data().deepCopy(fields()[10].schema(), other.minimum_nights);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.number_of_reviews)) {
                this.number_of_reviews = data().deepCopy(fields()[11].schema(), other.number_of_reviews);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.last_review)) {
                this.last_review = data().deepCopy(fields()[12].schema(), other.last_review);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.reviews_per_month)) {
                this.reviews_per_month = data().deepCopy(fields()[13].schema(), other.reviews_per_month);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.calculated_host_listings_count)) {
                this.calculated_host_listings_count = data().deepCopy(fields()[14].schema(), other.calculated_host_listings_count);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
            if (isValidValue(fields()[15], other.availability_365)) {
                this.availability_365 = data().deepCopy(fields()[15].schema(), other.availability_365);
                fieldSetFlags()[15] = other.fieldSetFlags()[15];
            }
        }

        /**
         * Creates a Builder by copying an existing AirbnbListing instance
         * @param other The existing instance to copy.
         */
        private Builder(com.nuix.avro.AirbnbListing other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.name)) {
                this.name = data().deepCopy(fields()[1].schema(), other.name);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.host_id)) {
                this.host_id = data().deepCopy(fields()[2].schema(), other.host_id);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.host_name)) {
                this.host_name = data().deepCopy(fields()[3].schema(), other.host_name);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.neighbourhood_group)) {
                this.neighbourhood_group = data().deepCopy(fields()[4].schema(), other.neighbourhood_group);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.neighbourhood)) {
                this.neighbourhood = data().deepCopy(fields()[5].schema(), other.neighbourhood);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.latitude)) {
                this.latitude = data().deepCopy(fields()[6].schema(), other.latitude);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.longitude)) {
                this.longitude = data().deepCopy(fields()[7].schema(), other.longitude);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.room_type)) {
                this.room_type = data().deepCopy(fields()[8].schema(), other.room_type);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.price)) {
                this.price = data().deepCopy(fields()[9].schema(), other.price);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.minimum_nights)) {
                this.minimum_nights = data().deepCopy(fields()[10].schema(), other.minimum_nights);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.number_of_reviews)) {
                this.number_of_reviews = data().deepCopy(fields()[11].schema(), other.number_of_reviews);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.last_review)) {
                this.last_review = data().deepCopy(fields()[12].schema(), other.last_review);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.reviews_per_month)) {
                this.reviews_per_month = data().deepCopy(fields()[13].schema(), other.reviews_per_month);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.calculated_host_listings_count)) {
                this.calculated_host_listings_count = data().deepCopy(fields()[14].schema(), other.calculated_host_listings_count);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.availability_365)) {
                this.availability_365 = data().deepCopy(fields()[15].schema(), other.availability_365);
                fieldSetFlags()[15] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public java.lang.Integer getId() {
            return id;
        }


        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setId(java.lang.Integer value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearId() {
            id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'name' field.
         * @return The value.
         */
        public java.lang.CharSequence getName() {
            return name;
        }


        /**
         * Sets the value of the 'name' field.
         * @param value The value of 'name'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setName(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.name = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'name' field has been set.
         * @return True if the 'name' field has been set, false otherwise.
         */
        public boolean hasName() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'name' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearName() {
            name = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'host_id' field.
         * @return The value.
         */
        public java.lang.Integer getHostId() {
            return host_id;
        }


        /**
         * Sets the value of the 'host_id' field.
         * @param value The value of 'host_id'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setHostId(java.lang.Integer value) {
            validate(fields()[2], value);
            this.host_id = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'host_id' field has been set.
         * @return True if the 'host_id' field has been set, false otherwise.
         */
        public boolean hasHostId() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'host_id' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearHostId() {
            host_id = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'host_name' field.
         * @return The value.
         */
        public java.lang.CharSequence getHostName() {
            return host_name;
        }


        /**
         * Sets the value of the 'host_name' field.
         * @param value The value of 'host_name'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setHostName(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.host_name = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'host_name' field has been set.
         * @return True if the 'host_name' field has been set, false otherwise.
         */
        public boolean hasHostName() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'host_name' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearHostName() {
            host_name = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'neighbourhood_group' field.
         * @return The value.
         */
        public java.lang.CharSequence getNeighbourhoodGroup() {
            return neighbourhood_group;
        }


        /**
         * Sets the value of the 'neighbourhood_group' field.
         * @param value The value of 'neighbourhood_group'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setNeighbourhoodGroup(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.neighbourhood_group = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'neighbourhood_group' field has been set.
         * @return True if the 'neighbourhood_group' field has been set, false otherwise.
         */
        public boolean hasNeighbourhoodGroup() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'neighbourhood_group' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearNeighbourhoodGroup() {
            neighbourhood_group = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'neighbourhood' field.
         * @return The value.
         */
        public java.lang.CharSequence getNeighbourhood() {
            return neighbourhood;
        }


        /**
         * Sets the value of the 'neighbourhood' field.
         * @param value The value of 'neighbourhood'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setNeighbourhood(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.neighbourhood = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'neighbourhood' field has been set.
         * @return True if the 'neighbourhood' field has been set, false otherwise.
         */
        public boolean hasNeighbourhood() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'neighbourhood' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearNeighbourhood() {
            neighbourhood = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'latitude' field.
         * @return The value.
         */
        public java.lang.Float getLatitude() {
            return latitude;
        }


        /**
         * Sets the value of the 'latitude' field.
         * @param value The value of 'latitude'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setLatitude(java.lang.Float value) {
            validate(fields()[6], value);
            this.latitude = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'latitude' field has been set.
         * @return True if the 'latitude' field has been set, false otherwise.
         */
        public boolean hasLatitude() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'latitude' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearLatitude() {
            latitude = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'longitude' field.
         * @return The value.
         */
        public java.lang.Float getLongitude() {
            return longitude;
        }


        /**
         * Sets the value of the 'longitude' field.
         * @param value The value of 'longitude'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setLongitude(java.lang.Float value) {
            validate(fields()[7], value);
            this.longitude = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'longitude' field has been set.
         * @return True if the 'longitude' field has been set, false otherwise.
         */
        public boolean hasLongitude() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'longitude' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearLongitude() {
            longitude = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'room_type' field.
         * @return The value.
         */
        public java.lang.CharSequence getRoomType() {
            return room_type;
        }


        /**
         * Sets the value of the 'room_type' field.
         * @param value The value of 'room_type'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setRoomType(java.lang.CharSequence value) {
            validate(fields()[8], value);
            this.room_type = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'room_type' field has been set.
         * @return True if the 'room_type' field has been set, false otherwise.
         */
        public boolean hasRoomType() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'room_type' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearRoomType() {
            room_type = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'price' field.
         * @return The value.
         */
        public java.lang.Float getPrice() {
            return price;
        }


        /**
         * Sets the value of the 'price' field.
         * @param value The value of 'price'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setPrice(java.lang.Float value) {
            validate(fields()[9], value);
            this.price = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'price' field has been set.
         * @return True if the 'price' field has been set, false otherwise.
         */
        public boolean hasPrice() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'price' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearPrice() {
            price = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'minimum_nights' field.
         * @return The value.
         */
        public java.lang.Integer getMinimumNights() {
            return minimum_nights;
        }


        /**
         * Sets the value of the 'minimum_nights' field.
         * @param value The value of 'minimum_nights'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setMinimumNights(java.lang.Integer value) {
            validate(fields()[10], value);
            this.minimum_nights = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'minimum_nights' field has been set.
         * @return True if the 'minimum_nights' field has been set, false otherwise.
         */
        public boolean hasMinimumNights() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'minimum_nights' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearMinimumNights() {
            minimum_nights = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'number_of_reviews' field.
         * @return The value.
         */
        public java.lang.Integer getNumberOfReviews() {
            return number_of_reviews;
        }


        /**
         * Sets the value of the 'number_of_reviews' field.
         * @param value The value of 'number_of_reviews'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setNumberOfReviews(java.lang.Integer value) {
            validate(fields()[11], value);
            this.number_of_reviews = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'number_of_reviews' field has been set.
         * @return True if the 'number_of_reviews' field has been set, false otherwise.
         */
        public boolean hasNumberOfReviews() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'number_of_reviews' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearNumberOfReviews() {
            number_of_reviews = null;
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'last_review' field.
         * @return The value.
         */
        public java.time.LocalDate getLastReview() {
            return last_review;
        }


        /**
         * Sets the value of the 'last_review' field.
         * @param value The value of 'last_review'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setLastReview(java.time.LocalDate value) {
            validate(fields()[12], value);
            this.last_review = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'last_review' field has been set.
         * @return True if the 'last_review' field has been set, false otherwise.
         */
        public boolean hasLastReview() {
            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'last_review' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearLastReview() {
            last_review = null;
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'reviews_per_month' field.
         * @return The value.
         */
        public java.lang.Float getReviewsPerMonth() {
            return reviews_per_month;
        }


        /**
         * Sets the value of the 'reviews_per_month' field.
         * @param value The value of 'reviews_per_month'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setReviewsPerMonth(java.lang.Float value) {
            validate(fields()[13], value);
            this.reviews_per_month = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'reviews_per_month' field has been set.
         * @return True if the 'reviews_per_month' field has been set, false otherwise.
         */
        public boolean hasReviewsPerMonth() {
            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'reviews_per_month' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearReviewsPerMonth() {
            reviews_per_month = null;
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'calculated_host_listings_count' field.
         * @return The value.
         */
        public java.lang.Integer getCalculatedHostListingsCount() {
            return calculated_host_listings_count;
        }


        /**
         * Sets the value of the 'calculated_host_listings_count' field.
         * @param value The value of 'calculated_host_listings_count'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setCalculatedHostListingsCount(java.lang.Integer value) {
            validate(fields()[14], value);
            this.calculated_host_listings_count = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'calculated_host_listings_count' field has been set.
         * @return True if the 'calculated_host_listings_count' field has been set, false otherwise.
         */
        public boolean hasCalculatedHostListingsCount() {
            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'calculated_host_listings_count' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearCalculatedHostListingsCount() {
            calculated_host_listings_count = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'availability_365' field.
         * @return The value.
         */
        public java.lang.Integer getAvailability365() {
            return availability_365;
        }


        /**
         * Sets the value of the 'availability_365' field.
         * @param value The value of 'availability_365'.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder setAvailability365(java.lang.Integer value) {
            validate(fields()[15], value);
            this.availability_365 = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'availability_365' field has been set.
         * @return True if the 'availability_365' field has been set, false otherwise.
         */
        public boolean hasAvailability365() {
            return fieldSetFlags()[15];
        }


        /**
         * Clears the value of the 'availability_365' field.
         * @return This builder.
         */
        public com.nuix.avro.AirbnbListing.Builder clearAvailability365() {
            availability_365 = null;
            fieldSetFlags()[15] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public AirbnbListing build() {
            try {
                AirbnbListing record = new AirbnbListing();
                record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
                record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.host_id = fieldSetFlags()[2] ? this.host_id : (java.lang.Integer) defaultValue(fields()[2]);
                record.host_name = fieldSetFlags()[3] ? this.host_name : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.neighbourhood_group = fieldSetFlags()[4] ? this.neighbourhood_group : (java.lang.CharSequence) defaultValue(fields()[4]);
                record.neighbourhood = fieldSetFlags()[5] ? this.neighbourhood : (java.lang.CharSequence) defaultValue(fields()[5]);
                record.latitude = fieldSetFlags()[6] ? this.latitude : (java.lang.Float) defaultValue(fields()[6]);
                record.longitude = fieldSetFlags()[7] ? this.longitude : (java.lang.Float) defaultValue(fields()[7]);
                record.room_type = fieldSetFlags()[8] ? this.room_type : (java.lang.CharSequence) defaultValue(fields()[8]);
                record.price = fieldSetFlags()[9] ? this.price : (java.lang.Float) defaultValue(fields()[9]);
                record.minimum_nights = fieldSetFlags()[10] ? this.minimum_nights : (java.lang.Integer) defaultValue(fields()[10]);
                record.number_of_reviews = fieldSetFlags()[11] ? this.number_of_reviews : (java.lang.Integer) defaultValue(fields()[11]);
                record.last_review = fieldSetFlags()[12] ? this.last_review : (java.time.LocalDate) defaultValue(fields()[12]);
                record.reviews_per_month = fieldSetFlags()[13] ? this.reviews_per_month : (java.lang.Float) defaultValue(fields()[13]);
                record.calculated_host_listings_count = fieldSetFlags()[14] ? this.calculated_host_listings_count : (java.lang.Integer) defaultValue(fields()[14]);
                record.availability_365 = fieldSetFlags()[15] ? this.availability_365 : (java.lang.Integer) defaultValue(fields()[15]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<AirbnbListing>
            WRITER$ = (org.apache.avro.io.DatumWriter<AirbnbListing>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<AirbnbListing>
            READER$ = (org.apache.avro.io.DatumReader<AirbnbListing>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}










